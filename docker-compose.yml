services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: scalebit_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/aws/main.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: .
      dockerfile: internal/pkg/services/users/Dockerfile
    environment:
      DATABASE_DSN: postgres://postgres:password@postgres:5432/scalebit_platform?sslmode=disable
      JWT_SECRET: your_jwt_secret
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"

  product-service:
    build:
      context: .
      dockerfile: internal/pkg/services/product/Dockerfile
    environment:
      DATABASE_DSN: postgres://postgres:password@postgres:5432/scalebit_platform?sslmode=disable
      JWT_SECRET: your_jwt_secret
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"

  order-service:
    build:
      context: .
      dockerfile: internal/pkg/services/order/Dockerfile
    environment:
      DATABASE_DSN: postgres://postgres:password@postgres:5432/scalebit_platform?sslmode=disable
      JWT_SECRET: your_jwt_secret
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8082:8082"

  payment-service:
    build:
      context: .
      dockerfile: internal/pkg/services/payment/Dockerfile
    environment:
      DATABASE_DSN: postgres://postgres:password@postgres:5432/scalebit_platform?sslmode=disable
      JWT_SECRET: your_jwt_secret
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"

  krakend:
    image: krakend:latest
    ports:
      - "8080:80"
    volumes:
      - ./deployments/aws/krakend.json:/etc/krakend/krakend.json
    depends_on:
      - user-service
      - product-service
      - order-service
      - payment-service

  frontend:
    build:
      context: ./frontend-dashboard
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - krakend
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080

volumes:
  postgres_data: